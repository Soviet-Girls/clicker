import time
import asyncio
import random
import traceback

from vkbottle import GroupEventType
from vkbottle.bot import Message, MessageEvent

import data
import keyboard
import widget

from rules import CommandRule, WalletRule
from bot import bot

refresh_message = {}

@bot.on.message(text="")
async def blank_message(message: Message):
    if message.from_id != 434356505:
        return
    await message.answer(str(message.json()))

@bot.on.message(CommandRule(["–Ω–∞—á–∞—Ç—å", "start", "—Å—Ç–∞—Ä—Ç"]))
async def start_message(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –¥–æ–±—ã—á–∏ Soviet Girls Ruble. –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üéÆ –ò–≥—Ä–∞—Ç—å",
        keyboard=keyboard.get_main_keyboard( )
        )
    if message.ref:
        ref = int(message.ref)
        if ref != message.from_id:
            old_ref = await data.get_ref(message.from_id)
            if old_ref != 0:
                return
            await data.set_ref(message.from_id, ref)
            await data.change_ref_count(ref, 1)
            await data.change_score(ref, 1000)
            bot_message = "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1000 SG‚ÇΩ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞!"
            await bot.api.messages.send(
                user_id=ref,
                message=bot_message,
                random_id=random.randint(0, 2 ** 64)
            )

@bot.on.message(CommandRule(["/ref"]))
async def ref_admin_message(message: Message):
    ref = message.ref
    ref_source = message.ref_source
    await message.answer(f"ref: {ref}, ref_source: {ref_source}")

rocket_secret_codes = {}
    
async def generate_play_message(user_id: int, score: int = -1) -> str:
    if score == -1:
        score = await data.get_score(user_id)
    score = "{:,}".format(score).replace(",", " ")
    bot_message = f"üí∞ –¢–≤–æ–π —Å—á—ë—Ç: {score} SG‚ÇΩ"
    sleep_time = data.get_sleep_time()
    if sleep_time == 0:
        bot_message += "\n\n‚åõ –î–æ–±—ã—á–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É."
    else:
        bot_message += f"\n\n‚åõ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞! –î–æ–±—ã—á–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥—ã–µ {sleep_time} —Å–µ–∫—É–Ω–¥."
    wallet = await data.get_wallet(user_id)
    if wallet == "":
        bot_message += "\n\n‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ Polygon –Ω–µ —É–∫–∞–∑–∞–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –±–æ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å SG‚ÇΩ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–≥—Ä—ã."
    else:
        wallet = wallet[:5] + "..." + wallet[-5:]
        bot_message += f"\n\nüì¶ –í–∞—à –∫–æ—à–µ–ª–µ–∫: {wallet}.\n –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–≥—Ä—ã SG‚ÇΩ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å."

    rocket = random.randint(0, 20) == 0
    if rocket:
        rocket_secret_codes[user_id] = random.randint(1000, 9999)
    else:
        rocket_secret_codes[user_id] = 0
    kb = keyboard.get_play_keyboard(rocket, rocket_secret_codes[user_id])
    return bot_message, kb
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üéÆ –ò–≥—Ä–∞—Ç—å"
async def play_message(event: MessageEvent):
    bot_message, kb = await generate_play_message(event.object.peer_id)
    await bot.api.messages.send(
        user_id=event.object.peer_id,
        message=bot_message,
        keyboard=kb,
        random_id=random.randint(0, 2 ** 64)
    )
    await event.show_snackbar("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üîù –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"
async def top_message(event: MessageEvent):
    top = await data.get_top()
    bot_message = "üèÜ –¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, user in enumerate(top):
        score = "{:,}".format(user[1]).replace(",", " ")
        user = await bot.api.users.get(user_ids=user[0])
        user = user[0]
        name = user.first_name + " " + user.last_name[0] + "."
        bot_message += f"{i+1}. {name} - {score} SG‚ÇΩ\n"
    await bot.api.messages.send(
        user_id=event.object.peer_id,
        message=bot_message,
        random_id=random.randint(0, 2 ** 64)
    )
    await event.show_snackbar("üîù –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üõçÔ∏è  –£–ª—É—á—à–µ–Ω–∏—è"
async def upgrades_message(event: MessageEvent):
    user_id = event.object.peer_id
    bot_message = "–í—ã–±–µ—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–µ:"
    await bot.api.messages.send(
        user_id=user_id,
        message=bot_message,
        keyboard=await keyboard.get_upgrades_keyboard(user_id),
        random_id=random.randint(0, 2 ** 64)
    )
    await event.show_snackbar("üõçÔ∏è –£–ª—É—á—à–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üîº –£–ª—É—á—à–µ–Ω–∏–µ –∫–ª–∏–∫–∞"
async def upgrade_cpc_message(event: MessageEvent):
    user_id = event.object.peer_id
    level = await data.get_level(user_id)
    price, income = data.price_count(level)
    score = await data.get_score(user_id)
    if score < price:
        await event.show_snackbar("üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    try:
        await data.change_score(user_id, -price)
    except Exception as e:
        await event.show_snackbar("üõë –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!")
        raise e
    _i = 0
    while True:
        try:
            await data.change_cpc(user_id, income)
            break
        except Exception as e:
            _i += 1
            if _i > 5:
                raise e
            await asyncio.sleep(1)
    _i = 0
    while True:
        try:
            await data.upgrade_level(user_id)
            break
        except Exception as e:
            _i += 1
            if _i > 5:
                raise e
            await asyncio.sleep(1)
    await event.show_snackbar("üîº –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ!")
    await upgrades_message(event)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "ü§ñ –ê–≤—Ç–æ–¥–æ–±—ã—á–∞"
async def upgrade_automine_message(event: MessageEvent):
    user_id = event.object.peer_id
    score = await data.get_score(user_id)
    if score < 5000:
        await event.show_snackbar("üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    try:
        await data.change_score(user_id, -5000)
    except Exception as e:
        await event.show_snackbar("üõë –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!")
        raise e
    _i = 0
    while True:
        try:
            await data.automine_on(user_id)
            break
        except Exception as e:
            _i += 1
            if _i > 5:
                raise e
            await asyncio.sleep(1)
    await event.show_snackbar("ü§ñ –ê–≤—Ç–æ–¥–æ–±—ã—á–∞ –≤–∫–ª—é—á–µ–Ω–∞!")
    await upgrades_message(event)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "ü™ô –î–û–ë–´–¢–¨!"
async def mine_message(event: MessageEvent):
    user_id = event.object.peer_id
    tm_last = await data.get_last_mine(user_id)
    tm = int(time.time())
    tm_diff = tm - tm_last
    sleep_time = data.get_sleep_time()
    _st = 1 if sleep_time == 0 else sleep_time
    if tm_diff < _st:
        egg = random.randint(0, 15)
        if egg == 0:
            await event.show_snackbar("‚ö° –í—ã –ø–æ—Å—Ç–∏—Ç–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!")
        elif egg == 1:
            await event.show_snackbar("üõë –ö—É–¥–∞ –≥–æ–Ω–∏—à—å, –±—Ä–∞—Ç?")
        elif egg == 2:
            await event.show_snackbar("üõë –ü—Ä–∏—Ç–æ—Ä–º–æ–∑–∏, —Ä–æ–¥–Ω–æ–π")
        elif egg == 3:
            await event.show_snackbar("üåø –°—Ö–æ–¥–∏ –ø–æ—Ç—Ä–æ–≥–∞–π —Ç—Ä–∞–≤—É")
        else:
            await event.show_snackbar("üõë –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!")
        return
    cpc = await data.get_cpc(user_id)
    try:
        automine_status = await data.get_automine_status(user_id)
        if automine_status:
            if tm_diff > 600:
                new_cpc = int(tm_diff /2 * cpc / 100)
                if new_cpc > 10000:
                    new_cpc = 10000
                elif new_cpc < 1:
                    new_cpc = 1
                cpc += new_cpc
        if sleep_time > 0:
            await asyncio.sleep(sleep_time)
        await data.change_score(user_id, cpc)
        await data.set_last_mine(user_id, tm)
    except Exception as e:
        await event.show_snackbar("üõë –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!")
        raise e
    score = await data.get_score(user_id)
    _rm = refresh_message.get(user_id, 0)
    try:
        await event.show_snackbar(f"üí∏ {score} (+{cpc})")
    except Exception as e:
        print(f"Error showing snackbar: {e}")
        await asyncio.sleep(4)
        await event.show_snackbar(f"üí∏ {score} (+{cpc})")
    try:
        if _rm == 4:
            bot_message, kb = await generate_play_message(event.object.peer_id, score)
            await bot.api.messages.edit(
                peer_id=event.object.peer_id,
                conversation_message_id=event.conversation_message_id,
                message=bot_message,
                keyboard=kb,
                random_id=random.randint(0, 2 ** 64)
            )
            _rm = 0
        else:
            _rm += 1
        refresh_message[user_id] = _rm

    except Exception as e:
        print(f"Error editing message: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å"
async def ref_message(event: MessageEvent):
    user_id = event.object.peer_id
    count = await data.get_ref_count(user_id)
    link = f"https://vk.me/soviet_clicker?ref={user_id}"
    bot_message = "üë• –û—Ç–ø—Ä–∞–≤—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å 1000 SG‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞!\n\n"
    bot_message += "–¢–∞–∫–∂–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ—É–ª—á–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π 1% –æ—Ç –¥–æ–±—ã—á–∏ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π (–æ–Ω –Ω–µ –±—É–¥–µ—Ç –æ—Ç–Ω–∏–º–∞—Ç—å—Å—è —É –¥—Ä—É–∑–µ–π).\n\n"
    bot_message += f"üßÆ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {count}\n\n"
    bot_message += f"üîó {link}"
    await bot.api.messages.send(
        user_id=user_id,
        message=bot_message,
        random_id=random.randint(0, 2 ** 64)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üöÄ –ë–û–ù–£–°!"
async def rocket_message(event: MessageEvent):
    user_id = event.object.peer_id
    secret_code = rocket_secret_codes.get(user_id, 0)
    if secret_code == 0:
        await event.show_snackbar("ü•≤ –ö–æ–¥ –±–æ–Ω—É—Å–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω")
        return
    elif event.object.payload.get("command") != f"rocket-{secret_code}":
        await event.show_snackbar("ü§° –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞")
        return
    else:
        rocket_secret_codes[user_id] = 0
    score = await data.get_score(user_id)
    cpc = await data.get_cpc(user_id)
    bonus = cpc * 5
    try:
        await data.change_score(user_id, bonus)
        await event.show_snackbar(f"üöÄ {score} (+{bonus})")
        bot_message, kb = await generate_play_message(user_id)
        await bot.api.messages.edit(
            peer_id=user_id,
            conversation_message_id=event.conversation_message_id,
            message=bot_message,
            keyboard=kb,
            random_id=random.randint(0, 2 ** 64)
        )
    except Exception as e:
        await event.show_snackbar("üõë –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!")
        raise e
    
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
@bot.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent)
async def callback_handler(event: MessageEvent):
    if event.object.payload.get("command") == "play":
        await play_message(event)
    elif event.object.payload.get("command") == "mine":
        await mine_message(event)
    elif event.object.payload.get("command") == "upgrades":
        await upgrades_message(event)
    elif event.object.payload.get("command") == "upgrade_cpc":
        await upgrade_cpc_message(event)
    elif event.object.payload.get("command") == "upgrade_automine":
        await upgrade_automine_message(event)
    elif event.object.payload.get("command") == "ref":
        await ref_message(event)
    elif event.object.payload.get("command") == "top":
        await top_message(event)
    elif event.object.payload.get("command").startswith("rocket-"):
        await rocket_message(event)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
@bot.on.raw_event(GroupEventType.GROUP_JOIN)
async def group_join_handler(event):
    # –î–∞—ë–º –±–æ–Ω—É—Å –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    user_id = event['object']['user_id']
    bonus = await data.get_invite_bonus(user_id)
    if bonus is False:
        await data.change_score(user_id, 1000)
        await data.set_invite_bonus(user_id, True)
        try:
            await bot.api.messages.send(
                user_id=user_id,
                message="üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1000 SG‚ÇΩ –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É!",
                random_id=random.randint(0, 2 ** 64)
            )
        except Exception as e:
            pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
@bot.on.raw_event(GroupEventType.GROUP_LEAVE)
async def group_leave_handler(event):
    user_id = event['object']['user_id']
    bonus = await data.get_invite_bonus(user_id)
    if bonus is True:
        await data.set_invite_bonus(user_id, False)
        await data.change_score(user_id, -1000)
    try:
        await bot.api.messages.send(
            user_id=user_id,
            message="üò¢ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –±–æ–Ω—É—Å–Ω—ã–µ 1000 SG‚ÇΩ –∑–∞ –≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã!",
            random_id=random.randint(0, 2 ** 64)
        )
    except Exception as e:
        pass

old_like_time = {}
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
@bot.on.raw_event(GroupEventType.LIKE_ADD)
async def like_add_handler(event):
    user_id = event['object']['liker_id']
    if old_like_time.get(user_id, 0) == event['object']['date']:
        return
    old_like_time[user_id] = event['object']['date']
    await data.change_score(user_id, 500)
    try:
        await bot.api.messages.send(
            user_id=user_id,
            message="üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 500 SG‚ÇΩ –∑–∞ –ª–∞–π–∫!",
            random_id=random.randint(0, 2 ** 64)
        )
    except Exception as e:
        pass

old_dislike_time = {}
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω—è—Ç–∏—è –ª–∞–π–∫–∞
@bot.on.raw_event(GroupEventType.LIKE_REMOVE)
async def like_remove_handler(event):
    user_id = event['object']['liker_id']
    if old_dislike_time.get(user_id, 0) == event['object']['date']:
        return
    old_dislike_time[user_id] = event['object']['date']
    await data.change_score(user_id, -500)
    try:
        await bot.api.messages.send(
            user_id=user_id,
            message="üò¢ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 500 SG‚ÇΩ –∑–∞ —Å–Ω—è—Ç–∏–µ –ª–∞–π–∫–∞!",
            random_id=random.randint(0, 2 ** 64)
        )
    except Exception as e:
        pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ VK Pay
@bot.on.message(CommandRule(["/vkpay"]))
async def vkpay_message(message: Message):
    _kb = keyboard.get_pay_keyboard()
    await message.answer("üéâ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ VK Pay", keyboard=_kb)

old_payment_time = {}
@bot.on.raw_event(GroupEventType.VKPAY_TRANSACTION)
async def vkpay_transaction_handler(event):
    if event['object']['date'] == old_payment_time.get(event['object']['from_id'], 0):
        return
    old_payment_time[event['object']['from_id']] = event['object']['date']
    user_id = event['object']['from_id']
    amount = event['object']['amount'] / 2
    await data.change_score(user_id, amount)
    try:
        await bot.api.messages.send(
            user_id=user_id,
            message=f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount*2} SG‚ÇΩ!",
            random_id=random.randint(0, 2 ** 64)
        )
    except Exception as e:
        raise e

@bot.on.message(WalletRule())
async def wallet_message(message: Message):
    await data.set_wallet(message.from_id, message.text)
    await message.answer("üì¶ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")


@bot.on.message(text='/save')
async def save_message(message: Message):
    if message.from_id != 434356505:
        return
    await data.save_scores()
    await data.save_last_mines()
    await data.save_top()
    await message.answer("üì¶ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

@bot.on.message(CommandRule(["/bonus"]))
async def bonus_message(message: Message):
    if message.from_id != 434356505:
        return
    target_id = int(message.text.split()[1])
    bonus = int(message.text.split()[2])
    await data.change_score(target_id, bonus)
    await message.answer(f"üéâ –í—ã–¥–∞–Ω–æ {bonus} SG‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
    await bot.api.messages.send(
        user_id=target_id,
        message=f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {bonus} SG‚ÇΩ!",
        random_id=random.randint(0, 2 ** 64)
    )

@bot.on.message(CommandRule(["/sleep"]))
async def sleep_message(message: Message):
    if message.from_id != 434356505:
        return
    sleep_time = int(message.text.split()[1])
    data.set_sleep_time(sleep_time)
    await message.answer(f"üí§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Å–Ω–∞ {sleep_time} —Å–µ–∫")

@bot.on.message(CommandRule(["/widget"]))
async def widget_message(message: Message):
    if message.from_id != 434356505:
        return
    await widget.update()
    await message.answer("üé® –í–∏–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")


@bot.loop_wrapper.interval(minutes=5)
async def save_scores():
    try:
        await data.save_scores()
        await data.save_last_mines()
        await data.save_top()
        await widget.update()
        await bot.api.groups.enable_online(group_id=225507433)
    except Exception as e:
        print(f"Error saving scores: {e}")
        await bot.api.messages.send(
            user_id=434356505,
            message=f"Error saving scores: {e}\n\n{traceback.format_exc()}",
            random_id=random.randint(0, 2 ** 64)
        )

bot.run_forever()